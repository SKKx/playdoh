{"name":"Playdoh","tagline":"Lightweight Python library for distributed computing and optimization ","body":"Playdoh: pure Python library for distributed computing and optimization \r\n=======================================================================\r\n\r\nPlaydoh is a pure Python library for distributing computations across the \r\nfree computing units (CPUs and GPUs) available in a small network of \r\nmulticore computers. Playdoh supports independent (embarassingly) parallel \r\nproblems as well as loosely coupled tasks such as global optimizations, \r\nMonte Carlo simulations and numerical integration of partial differential \r\nequations. It is designed to be *lightweight* and *easy-to-use* and should \r\nbe of interest to scientists wanting to turn their lab computers into a \r\nsmall cluster at no cost.\r\n\r\n## Features\r\n\r\n  * **Standalone, lightweight, easy-to-use pure Python library** for \r\n    small-scale distributed scientific computing\r\n  * **Parallel/distributed version of `map`**: call any Python function \r\n    with different parameters in parallel over different CPUs/computers \r\n    interconnected within a standard Ethernet network\r\n\r\n        import playdoh\r\n        result = playdoh.map(lambda x: x * x, [1, 2], cpu=2)  # result == [1, 4]\r\n\r\n  * **Built-in support for GPU through PyCUDA**: if you provide the \r\n    PyCUDA/CUDA code, Playdoh can run it on several GPUs (on one or more \r\n    computers) in parallel\r\n  * **Built-in distributed optimization toolbox**: you provide an \r\n    objective Python function, and Playdoh will minimize or maximize it in \r\n    parallel over several CPUs/computers (or GPUs if you give the \r\n    PyCUDA/CUDA code) using a particle-based gradient-free optimization \r\n    algorithm (CMA-ES, Genetic Algorithms or Particle Swarm Optimization \r\n    algorithm)\r\n  * **Simple coarse-grained distributed computing interface**: you can \r\n    distribute your computations into loosely-coupled tasks and run them in \r\n    parallel over CPUs and computers, inter-node communication happening \r\n    through blocking FIFO tubes exposing a straightforward push/pull \r\n    interface (examples include distributed PDE solvers, cellular automata, \r\n    Monte Carlo simulators, optimizations...)\r\n  * **Code handling**: Playdoh handles the transport of your Python code \r\n    between machines\r\n  * **Resources sharing**: specify how many CPUs you dedicate to others' \r\n    computations and how many you keep for yourself\r\n\r\n## Documentation\r\n\r\n[The documentation can be found here](https://playdoh-python.readthedocs.org/en/latest/index.html).\r\n\r\n## Paper\r\n\r\nRossant C, Fontaine B, Goodman DFM (2011).\r\n[**Playdoh: a lightweight Python package for distributed computing and optimisation**](http://www.sciencedirect.com/science/article/pii/S1877750311000561). *Journal of Computational Science*\r\n\r\n### Abstract\r\n\r\nParallel computing is now an essential paradigm for high performance \r\nscientific computing. Most existing hardware and software solutions are \r\nexpensive or difficult to use. We developed Playdoh, a Python library for \r\ndistributing computations across the free computing units available in a \r\nsmall network of multicore computers. Playdoh supports independent and \r\nloosely coupled parallel problems such as global optimisations, Monte \r\nCarlo simulations and numerical integration of partial differential \r\nequations. It is designed to be lightweight and easy to use and should be \r\nof interest to scientists wanting to turn their lab computers into a small \r\ncluster at no cost.\r\n\r\n## Contribute\r\n\r\nPlaydoh is an open-source project and anyone is welcome to contribute to \r\nthe project. Here are some info about the source code.\r\n\r\n  * There's a unit testing suite in the `test` directory, it can be \r\n    launched with the `test.py` script.\r\n\r\n  * A document explaining how to add new features to Playdoh (like a new \r\n    optimization algorithm) will be available soon.\r\n\r\n  * A document explaining the internal implementation details of Playdoh \r\n    will be available soon, it will be the starting point if you want to \r\n    contribute to the code.\r\n\r\n  * You can submit issues, ideas, comments on the\r\n    [Playdoh Google group](http://groups.google.com/group/playdoh-library).\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}